@inject SignInManager<DomainModel.Person> SignInManager
@inject UserManager<DomainModel.Person> UserManager

@{
    var hasExternalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).Any();
}
<ul class="nav nav-pills flex-column">

    @if (User.IsInRole("ROLE_USER"))
    {
        <li class="nav-item"><a class="nav-link @ManageNavPages.IndexPatientNavClass(ViewContext)" id="profile" asp-page="./IndexPatient">Votre profil</a></li>
    }

    @if (User.IsInRole("ROLE_ADMIN") || User.IsInRole("ROLE_SUPER_ADMIN"))
    {
        <li class="nav-item"><a class="nav-link @ManageNavPages.IndexNurseNavClass(ViewContext)" id="profile" asp-page="./IndexNurse">Votre profil</a></li>
    }

    <li class="nav-item"><a class="nav-link @ManageNavPages.EmailNavClass(ViewContext)" id="email" asp-page="./Email">E-mail</a></li>
    <li class="nav-item"><a class="nav-link @ManageNavPages.ChangePasswordNavClass(ViewContext)" id="change-password" asp-page="./ChangePassword">Mot de passe</a></li>
    @if (hasExternalLogins)
    {
        <li id="external-logins" class="nav-item"><a id="external-login" class="nav-link @ManageNavPages.ExternalLoginsNavClass(ViewContext)" asp-page="./ExternalLogins">External logins</a></li>
    }
    @* <li class="nav-item"><a class="nav-link @ManageNavPages.TwoFactorAuthenticationNavClass(ViewContext)" id="two-factor" asp-page="./TwoFactorAuthentication">Two-factor authentication</a></li>*@
    <li class="nav-item"><a class="nav-link @ManageNavPages.PersonalDataNavClass(ViewContext)" id="personal-data" asp-page="./PersonalData">Données personnelles</a></li>
</ul>